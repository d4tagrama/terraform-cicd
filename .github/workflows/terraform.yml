name: 'Terraform'

on:
  push:
    branches: [ "main" ]
  pull_request:

env:
  TF_CLOUD_ORGANIZATION: "D4tagrama"
  TF_API_TOKEN: "${{ secrets.TF_API_TOKEN }}"
  TF_WORKSPACE: "Prod"
 # CONFIG_DIRECTORY: "./"

permissions:
  id-token: write
  contents: read

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Validate
      run: terraform validate

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -input=false -out=prod-plan.out -var-file="prod.tfvars"

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
         role-to-assume: ${{ secrets.AWS_STS_ROLE }}
         aws-region: us-east-1
    - name: Save Terraform Plan
      run: |
        CURRENT_DATE=$(date +"%Y-%m-%d-%H%M") 
        aws s3 cp ./prod-plan.out s3://${{ secrets.AWS_BUCKET }}/prod-plan-${CURRENT_DATE}.out
      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      if: github.ref == 'refs/heads/"main"' && github.event_name == 'push'
      run: terraform apply -auto-approve -input=false -var-file="prod.tfvars"
      
  terraform-sast:
    name: 'Terraform SAST'
    needs: terraform
    runs-on: ubuntu-latest
    environment: production
    steps: 
    - name: Configure Checkov
      uses: actions/checkout@v2
      
    - name: Set Up Python 3.8
      uses: actions/setup-python@v4
      with:
        python-version: 3.8

    - name: Install Checkov
      run: pip install --upgrade checkov
      
    - name: Run Checkov scan
      run: checkov -d . --config-file /dev/null --skip-check CKV_AWS_135,CKV_AWS_79,CKV_AWS_126,CKV_AWS_8,CKV_AWS_382,CKV_AWS_23,CKV2_AWS_11,CKV2_AWS_12,CKV2_AWS_5,CKV2_AWS_41 